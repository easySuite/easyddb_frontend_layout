<?php
/**
 * @file
 */

/**
 * Implements hook_install().
 */
function easyddb_frontend_layout_install() {
  easyddb_frontend_layout_migrate_colors();
}

/**
 * Migrate colors from old theme.
 */
function easyddb_frontend_layout_update_7001() {
  easyddb_frontend_layout_migrate_colors();
}

/**
 * Updating carousels which are linked to compact view mode.
 */
function easyddb_frontend_layout_update_7002() {
  $query = db_select('panels_pane', 'pp')
    ->fields('pp')
    ->condition('type', 'serendipity_ting_object')
    ->execute()
    ->fetchAll();

  foreach ($query as $pane) {
    $configuration = unserialize($pane->configuration);
    if ($configuration['view_mode'] == 'compact') {
      $configuration['view_mode'] = 'teaser';

      $pane->configuration = serialize($configuration);

      db_update('panels_pane')
        ->fields(array('configuration' => $pane->configuration))
        ->condition('pid', $pane->pid, '=')
        ->execute();
    }
  }
}

/**
 * Migrate of colors from old ddbasic.
 */
function easyddb_frontend_layout_migrate_colors() {
  $old_theme_settings = variable_get('theme_ddbasic_settings', array());

  if (!empty($old_theme_settings)) {
    variable_set('theme_ddbasic_settings_backup', $old_theme_settings);

    $topbar_color = $old_theme_settings['palette']['topbar_background_color'];
    $header_background_color = $old_theme_settings['palette']['header_background_color'];
    $navigation_background_color = $old_theme_settings['palette']['navigation_background_color'];
    $link_color = $old_theme_settings['palette']['link'];

    $palette_changes = array(
      'primary' => $navigation_background_color,
      'secondary' => $link_color,
      'topbar' => $topbar_color,
      'extended_search_pane' => $header_background_color,
    );

    color_update_palette('ddbasic', $palette_changes);
  }
}

/**
 * Update selected colors in the specified theme's color palette without changing
 * the entire color scheme. A screen refresh is required to see the effect of any
 * palette changes.
 *
 * The palette changes made by calling this function have the same effect as when an
 * admin user goes to the theme's Settings page and changes individual color selections.
 * Once this function has been called, the admin user is still free to go back and
 * change the affected colors via the theme's Settings page. Of course, if this function
 * is called after a user manually changes the selected colors, the manual changes
 * will be overwritten; thus, this function should typically only be called sparingly,
 * such as during a module install.
 *
 * To use this function, your theme must be enabled, it must use the Color module, and
 * the Color module itself (installed with Drupal core) must be enabled.
 *
 * Example:
 *     color_update_palette('my-theme-name', array(
 *       'headertop'    => '#2f2f2f',
 *       'headerbottom' => '#600b0b',
 *     ));
 */
function color_update_palette($theme, $palette_changes) {
  $palette = color_get_palette($theme);

  $ok = TRUE;
  foreach ($palette_changes as $key => $color) {
    // Only accept hexadecimal CSS color strings. color_scheme_form_submit()
    // also performs this validation, but since we're not supplying it with
    // a real form, any error messages it generates probably wouldn't be
    // displayed correctly.
    if (preg_match('/^#([a-f0-9]{3}){1,2}$/iD', $color)) {
      $palette[$key] = $color;
    }
    else {
      drupal_set_message(t('%name must be a valid hexadecimal CSS color value.',
        array('%name' => $key)), 'error');
      $ok = FALSE;
    }
  }

  if ($ok) {
    $form_state = array();
    $form_state['values']['palette'] = $palette;
    $form_state['values']['theme']   = $theme;
    $form_state['values']['info']    = color_get_info($theme);
    $form_state['values']['scheme']  = 'custom';

    color_scheme_form_submit(null, $form_state);
    drupal_set_message(t("Updated color palette"));
  }
}
