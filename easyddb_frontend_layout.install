<?php
/**
 * @file
 */

/**
 * Implements hook_install().
 */
function easyddb_frontend_layout_install() {
  easyddb_frontend_layout_migrate_colors();
}

/**
 * Migrate colors from old theme.
 */
function easyddb_frontend_layout_update_7001() {
  easyddb_frontend_layout_migrate_colors();
}

/**
 * Updating carousels which are linked to compact view mode.
 */
function easyddb_frontend_layout_update_7002() {
  $query = db_select('panels_pane', 'pp')
    ->fields('pp')
    ->condition('type', 'serendipity_ting_object')
    ->execute()
    ->fetchAll();

  foreach ($query as $pane) {
    $configuration = unserialize($pane->configuration);
    if ($configuration['view_mode'] == 'compact') {
      $configuration['view_mode'] = 'teaser';

      $pane->configuration = serialize($configuration);

      db_update('panels_pane')
        ->fields(array('configuration' => $pane->configuration))
        ->condition('pid', $pane->pid, '=')
        ->execute();
    }
  }
}

/**
 * Migrate of colors from old ddbasic.
 */
function easyddb_frontend_layout_migrate_colors() {
  $old_theme_settings = variable_get('theme_ddbasic_settings', array());

  if (!empty($old_theme_settings)) {
    variable_set('theme_ddbasic_settings_backup', $old_theme_settings);

    $info = array(
      // Available colors and color labels used in theme.
      'fields' => array(
        'base' => t('Base'),
        'link' => t('Link'),
        'primary' => t('Primary'),
        'secondary' => t('Secondary'),
        'text' => t('Text'),
        'text_link' => t('Text link'),
        'text_link_on_dark' => t('Text link on dark background'),
        'text_on_primary' => t('Text on primary'),
        'text_on_secondary' => t('Text on secondary'),
        'topbar' => t('Topbar'),
        'extended_search_pane' => t('Extended search pane'),
      ),
      // Pre-defined color schemes.
      'schemes' => array(
        'default' => array(
          'title' => t('Default'),
          'colors' => array(
            'base' => '#ffffff',
            'link' => '#ffffff',

            'primary' => '#4d898e',
            'secondary' => '#f66d70',
            'text' => '#262627',
            'text_link' => '#4d898f',
            'text_link_on_dark' => '#4d898d',
            'text_on_primary' => '#fffff1',
            'text_on_secondary' => '#fffff2',
            'topbar' => '#f1f2f3',
            'extended_search_pane' => '#262625',
          ),
        ),
      ),

      // Images to copy over.
      'copy' => array(),

      // CSS files (excluding @import) to rewrite with new color scheme.
      'css' => array(),

      // Gradient definitions.
      'gradients' => array(),

      // Color areas to fill (x, y, width, height).
      'fill' => array(),

      // Coordinates of all the theme slices (x, y, width, height)
      // with their filename as used in the stylesheet.
      'slices' => array(),

      // Reference color used for blending. Matches the base.png's colors.
      'blend_target' => '#ffffff',

      // Preview files.
      'preview_css' => 'color/preview.css',

      // Base file for image generation.
      'base_image' => 'color/base.png',
    );


    $palette = $info['schemes']['default']['colors'];

    if (!empty($old_theme_settings['palette'])) {
      $palette['topbar'] = $old_theme_settings['palette']['topbar_background_color'];
      $palette['extended_search_pane'] = $old_theme_settings['palette']['header_background_color'];
      $palette['primary'] = $old_theme_settings['palette']['navigation_background_color'];
      $palette['secondary'] = $old_theme_settings['palette']['link'];
    }

    $info['schemes']['default']['colors'] = $palette;
    $old_theme_settings['palette'] = $palette;

    $old_theme_settings['info'] = $info;

    $theme_path = drupal_realpath(drupal_get_path('theme', 'ddbasic')) . '/';
    $cssfiles = array_merge(
      file_scan_directory($theme_path . '/sass_css', '/\.css$/')
    );
    $old_theme_settings['info']['css'] = array();
    foreach ($cssfiles as $cssfile) {
      $old_theme_settings['info']['css'][] = str_replace($theme_path, '', drupal_realpath($cssfile->uri));
    }

    variable_set('theme_ddbasic_settings', $old_theme_settings);
    color_update_palette('ddbasic', $palette);

    drupal_flush_all_caches();
  }
}

/**
 * Update selected colors in the specified theme's color palette.
 *
 * Without changing the entire color scheme. A screen refresh is required
 * to see the effect of any palette changes.
 */
function color_update_palette($theme, $palette) {
  $theme_settings = variable_get('theme_ddbasic_settings', array());
  $form_state = array();
  $form_state['values']['palette'] = $palette;
  $form_state['values']['theme']   = $theme;
  $form_state['values']['info']    = $theme_settings['info'];
  $form_state['values']['scheme']  = 'custom';

  color_scheme_form_submit(NULL, $form_state);
  drupal_set_message(t("Updated color palette"));
}

/**
 * Remove any access rules for carousels.
 */
function easyddb_frontend_layout_update_7003() {
  $query = db_select('panels_pane', 'pp')
    ->fields('pp', ['pid', 'access'])
    ->condition('type', 'carousel')
    ->condition('subtype', 'carousel')
    ->execute()
    ->fetchAll();

  foreach ($query as $item) {
    if (!empty($item->access)) {
      $item->access = array();
      db_update('panels_pane')
        ->fields(['access' => serialize($item->access)])
        ->condition('pid', $item->pid)
        ->execute();
    }
  }
}

/**
 * Enable 'Mimemail' module.
 */
function easyddb_frontend_layout_update_7004() {
  module_enable(array('mimemail'));
}

/**
 * Migrate ding_event_rooms field's data to ding_event_place field.
 */
function easyddb_frontend_layout_update_7005() {
  $entity_type = 'node';
  $rooms_field_name = 'field_ding_event_rooms';
  $bundle = 'ding_event';
  // Check if rooms field exists.
  $rooms_field_instance = field_info_instance($entity_type, $rooms_field_name, $bundle);

  if ($rooms_field_instance) {
    // Fetch nids which have 'rooms' field relation.
    $rooms = db_select('field_data_field_ding_event_rooms', 'rooms')
      ->fields('rooms')
      ->execute()
      ->fetchAll();

    // Check if "places" field is not empty.
    $places = db_select('field_data_field_ding_event_place', 'places')
      ->fields('places')
      ->execute()
      ->fetchAll();

    if ($rooms && !$places) {
      // Collect all 'rooms' vocabulary tids used in ding_event node CT.
      $tids = [];
      foreach ($rooms as $item) {
        $tids[$item->field_ding_event_rooms_tid] = $item->field_ding_event_rooms_tid;
      }

      // Load terms data.
      $loaded_terms = taxonomy_term_load_multiple($tids);

      // Insert data into 'place' field.
      $tables = [
        'field_data_field_ding_event_place',
        'field_revision_field_ding_event_place',
      ];

      foreach ($rooms as $entity) {
        foreach ($tables as $table) {
          db_insert($table)
            ->fields([
              'entity_type' => $entity->entity_type,
              'bundle' => $entity->bundle,
              'deleted' => $entity->deleted,
              'entity_id' => $entity->entity_id,
              'revision_id' => $entity->revision_id,
              'language' => $entity->language,
              'delta' => $entity->delta,
              'field_ding_event_place_value' => $loaded_terms[$entity->field_ding_event_rooms_tid]->name,
              'field_ding_event_place_format' => NULL,
            ])
            ->execute();
        }
      }
    }
    elseif ($rooms && $places) {
      $places_array = [];
      foreach ($places as $place) {
        $places_array[] = $place->entity_id;
      }

      foreach ($rooms as $entity) {
        if (!in_array($entity->entity_id, $places_array)) {
          $term = taxonomy_term_load($entity->field_ding_event_rooms_tid);

          // Insert data into 'place' field.
          $tables = [
            'field_data_field_ding_event_place',
            'field_revision_field_ding_event_place',
          ];

          foreach ($tables as $table) {
            db_insert($table)
              ->fields([
                'entity_type' => $entity->entity_type,
                'bundle' => $entity->bundle,
                'deleted' => $entity->deleted,
                'entity_id' => $entity->entity_id,
                'revision_id' => $entity->revision_id,
                'language' => $entity->language,
                'delta' => $entity->delta,
                'field_ding_event_place_value' => $term->name,
                'field_ding_event_place_format' => NULL,
              ])
              ->execute();
          }
        }
      }
    }

    // Remove 'rooms' fields.
    field_delete_instance($rooms_field_instance, TRUE);
    field_delete_field($rooms_field_name);
    field_cron();

    // Remove 'rooms' taxonomy vocabulary.
    $rooms_vocabulary = taxonomy_vocabulary_machine_name_load('rooms');
    taxonomy_vocabulary_delete($rooms_vocabulary->vid);

    // Disable and uninstall ding_event_rooms module.
    module_disable(['ding_event_rooms']);
    drupal_uninstall_modules(['ding_event_rooms']);
  }
}

/**
 * Update current filter list of default items.
 */
function easyddb_frontend_layout_update_7006(&$sandbox) {
  variable_del('ding_ipe_filter_panes_selected');
  $selections = _ding_ipe_filter_selected_panes();
  variable_set('ding_ipe_filter_panes_selected', $selections);
}

/**
 * Cleanup nodelist templates table.
 */
function easyddb_frontend_layout_update_7007() {
  // Check ding_blog enabled;
  $blog_enabled = FALSE;
  if (module_exists('ding_blog')) {
    $blog_enabled = TRUE;
  }

  // Stage 1.
  $opts = db_select('ding_nodelist_templates', 'dnt')
    ->fields('dnt', [])
    ->condition('content_type', '')
    ->execute()
    ->fetchAll();

  foreach ($opts as $opt) {
    $exp = explode('.', $opt->filename);

    if (!empty($exp[1])) {
      $ct = $exp[1];
      $widget = $exp[2];
      $status = 0;

      if (strpos($opt->filename, $ct) !== FALSE && $ct == 'blog' && !$blog_enabled) {
        $status = 1;
      }

      db_update('ding_nodelist_templates')
        ->fields([
          'content_type' => $ct,
          'widget' => $widget,
          'status' => $status,
        ])
        ->condition('filename', $opt->filename)
        ->execute();
    }
  }

  // Stage 2.
  db_delete('ding_nodelist_templates')
    ->condition('content_type', '')
    ->condition('widget', '')
    ->execute();
}

/**
 * Unlock locked in 3.x version ding_ting_frontend field_group component.
 */
function easyddb_frontend_layout_update_7008() {
  features_feature_unlock('ding_ting_frontend', 'field_group');
}

/**
 * Update image field instances for re-use core image styles.
 */
function easyddb_frontend_layout_update_7009() {
  // Update ting_cover instance.
  $instance = field_info_instance('ting_object', 'ting_cover', 'ting_object');

  $changes_list = [
    'collection_list' => 'ding_list_medium',
    'collection_primary' => 'ding_primary_large',
    'default' => 'ding_primary_large',
    'reference_teaser' => 'ding_list_medium',
    'search_result' => 'ding_list_medium',
    'teaser' => 'ding_list_medium',
    'ting_reference_preview' => 'ding_list_medium',
    'user_list' => 'ding_list_medium',
  ];

  foreach ($changes_list as $display => $style) {
    $instance['display'][$display]['settings']['image_style'] = $style;
  }

  field_update_instance($instance);

  // Update image field instances of CT's used in editorial search.
  $content_types_changes = [
    'node' => [
      'ding_event' => 'field_ding_event_list_image',
      'ding_news' => 'field_ding_news_list_image',
      'ding_page' => 'field_ding_page_list_image',
    ],
    'profile2' => [
      'ding_staff_profile' => 'field_ding_staff_image',
    ],
  ];

  foreach ($content_types_changes as $bundle => $types) {
    foreach ($types as $type => $field) {
      $instance = field_info_instance($bundle, $field, $type);
      $instance['display']['search_result']['settings']['image_style'] = 'ding_list_small';
      field_update_instance($instance);
    }
  }
}
